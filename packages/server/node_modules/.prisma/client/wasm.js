
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.Order_historyScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  brandName: 'brandName',
  dealCodes: 'dealCodes',
  orderJson: 'orderJson',
  createdAt: 'createdAt'
};

exports.Prisma.AnswersScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  questionText: 'questionText',
  answer: 'answer',
  productFeedbackBrandId: 'productFeedbackBrandId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pitchExitBrandId: 'pitchExitBrandId'
};

exports.Prisma.App_versionsScalarFieldEnum = {
  id: 'id',
  version: 'version',
  critical: 'critical',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BenefitsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  description: 'description',
  logo: 'logo',
  image: 'image',
  redeemLink: 'redeemLink',
  levelId: 'levelId',
  tags: 'tags',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandsScalarFieldEnum = {
  id: 'id',
  isVisible: 'isVisible',
  description: 'description',
  shortDescription: 'shortDescription',
  name: 'name',
  pitchVideo: 'pitchVideo',
  pitchCaptions: 'pitchCaptions',
  pitchSections: 'pitchSections',
  updatedAt: 'updatedAt',
  brandLogo: 'brandLogo',
  email: 'email',
  managerEmail: 'managerEmail',
  managerName: 'managerName',
  managerPhone: 'managerPhone',
  labels: 'labels',
  teamPicture: 'teamPicture',
  website: 'website',
  categoryId: 'categoryId',
  teaser: 'teaser',
  mainPhrase: 'mainPhrase',
  founders: 'founders',
  image: 'image',
  usersForYouIds: 'usersForYouIds',
  usersForYouPoolIds: 'usersForYouPoolIds',
  images: 'images',
  usersFeedback: 'usersFeedback',
  targetGender: 'targetGender',
  budgetInterval: 'budgetInterval',
  shopifyDomain: 'shopifyDomain',
  shopifyKeyName: 'shopifyKeyName',
  ledgeRating: 'ledgeRating',
  showTeamPictureInRating: 'showTeamPictureInRating',
  recentlyRotatedByIds: 'recentlyRotatedByIds',
  isCharity: 'isCharity',
  showFirst: 'showFirst'
};

exports.Prisma.Brands_likesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  brandId: 'brandId',
  createdAt: 'createdAt'
};

exports.Prisma.Unlocked_brands_historyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  brandId: 'brandId',
  createdAt: 'createdAt'
};

exports.Prisma.Brand_screen_timesScalarFieldEnum = {
  id: 'id',
  time: 'time',
  userId: 'userId',
  brandId: 'brandId',
  createdAt: 'createdAt'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Category_choicesScalarFieldEnum = {
  id: 'id',
  like: 'like',
  categoryId: 'categoryId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  details: 'details',
  userId: 'userId',
  brandId: 'brandId',
  productId: 'productId',
  benefitId: 'benefitId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoundersReachedLeaderboardScalarFieldEnum = {
  id: 'id',
  amount: 'amount'
};

exports.Prisma.Link_visitsScalarFieldEnum = {
  id: 'id',
  url: 'url',
  userId: 'userId',
  brandId: 'brandId',
  productId: 'productId',
  benefitId: 'benefitId',
  createdAt: 'createdAt'
};

exports.Prisma.PostsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  author: 'author',
  content: 'content',
  video: 'video',
  image: 'image',
  brandId: 'brandId',
  userLikesIds: 'userLikesIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Production_submissionsScalarFieldEnum = {
  id: 'id',
  overlays: 'overlays',
  videos: 'videos',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  brandId: 'brandId',
  userId: 'userId'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  description: 'description',
  images: 'images',
  regularPrice: 'regularPrice',
  deal: 'deal',
  dealPrice: 'dealPrice',
  purchaseUrl: 'purchaseUrl',
  brandId: 'brandId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  uniqueDeal: 'uniqueDeal'
};

exports.Prisma.Push_notificationsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  type: 'type',
  minDaysInactive: 'minDaysInactive',
  oneTimeOnly: 'oneTimeOnly',
  sendAfterInactiveDays: 'sendAfterInactiveDays',
  repeatAfterDays: 'repeatAfterDays',
  daysAfterActivation: 'daysAfterActivation',
  daysBeforeExpiry: 'daysBeforeExpiry'
};

exports.Prisma.Push_notification_historyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  entityId: 'entityId',
  content: 'content',
  title: 'title',
  sentAt: 'sentAt'
};

exports.Prisma.QuestionnairesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Question_classesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionsScalarFieldEnum = {
  id: 'id',
  position: 'position',
  question: 'question',
  type: 'type',
  options: 'options',
  classId: 'classId',
  categoryId: 'categoryId',
  onboarding: 'onboarding',
  randomizeOptions: 'randomizeOptions',
  fixedOptionSize: 'fixedOptionSize',
  hideOptionText: 'hideOptionText',
  displayImage: 'displayImage',
  footnote: 'footnote',
  subtitle: 'subtitle',
  products: 'products',
  brandId: 'brandId',
  correctAnswerId: 'correctAnswerId',
  questionnaireId: 'questionnaireId',
  questionnaireSubCategory: 'questionnaireSubCategory',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  scaleTopLabel: 'scaleTopLabel',
  scaleBottomLabel: 'scaleBottomLabel',
  maxOptions: 'maxOptions'
};

exports.Prisma.RatingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  brandId: 'brandId',
  rating: 'rating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Content_viewsScalarFieldEnum = {
  id: 'id',
  section: 'section',
  userId: 'userId',
  contentId: 'contentId',
  contentType: 'contentType',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  text: 'text',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LevelsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  requiredBrandsExplored: 'requiredBrandsExplored',
  requiredAnswers: 'requiredAnswers',
  questionnaireId: 'questionnaireId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Login_background_imagesScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  myFavourites: 'myFavourites',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  notificationsToken: 'notificationsToken',
  forYouBrandsIds: 'forYouBrandsIds',
  forYouBrandsPoolIds: 'forYouBrandsPoolIds',
  levelId: 'levelId',
  brandsExplored: 'brandsExplored',
  ownedBrandId: 'ownedBrandId',
  foundersReachedLeaderboardId: 'foundersReachedLeaderboardId',
  viewedPitches: 'viewedPitches',
  deletedBrands: 'deletedBrands',
  superUser: 'superUser',
  likedPostsIds: 'likedPostsIds',
  lastOpened: 'lastOpened',
  recentlyRotatedBrandsIds: 'recentlyRotatedBrandsIds',
  hasCompletedOnboarding: 'hasCompletedOnboarding',
  location: 'location',
  profilePicture: 'profilePicture',
  friendCode: 'friendCode'
};

exports.Prisma.Deal_codesScalarFieldEnum = {
  id: 'id',
  code: 'code',
  isUsed: 'isUsed',
  userId: 'userId',
  groupId: 'groupId',
  userExpireDate: 'userExpireDate',
  expirationWasNotified: 'expirationWasNotified',
  unlockedAt: 'unlockedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Deal_code_groupsScalarFieldEnum = {
  id: 'id',
  description: 'description',
  shortDescription: 'shortDescription',
  codesState: 'codesState',
  brandId: 'brandId',
  generalExpireDate: 'generalExpireDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  adventCalendarEvent: 'adventCalendarEvent'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.GenderPreference = exports.$Enums.GenderPreference = {
  men: 'men',
  women: 'women',
  both: 'both',
  other: 'other'
};

exports.EventType = exports.$Enums.EventType = {
  pitchInteractionInitiated: 'pitchInteractionInitiated',
  pitchInteractionVideoFinished: 'pitchInteractionVideoFinished',
  pitchInteractionCompleted: 'pitchInteractionCompleted',
  pitchInteractionQuitted: 'pitchInteractionQuitted',
  exitQuestionAnswered: 'exitQuestionAnswered',
  errorScreenShowed: 'errorScreenShowed',
  brandListItemPressed: 'brandListItemPressed',
  levelUpgraded: 'levelUpgraded',
  onboardingInteraction: 'onboardingInteraction',
  timeInBrandProfile: 'timeInBrandProfile',
  brandRemovedFromFavourites: 'brandRemovedFromFavourites',
  brandAddedToFavourites: 'brandAddedToFavourites',
  readMoreButtonPressed: 'readMoreButtonPressed',
  brandRedeemLinkPressed: 'brandRedeemLinkPressed',
  brandProfileImagesSwiped: 'brandProfileImagesSwiped',
  brandProductLinkPressed: 'brandProductLinkPressed',
  brandSeeAllProductsLinkPressed: 'brandSeeAllProductsLinkPressed',
  brandProfileProductsSwiped: 'brandProfileProductsSwiped',
  benefitRedeemLinkPressed: 'benefitRedeemLinkPressed',
  devPitchVideoSkipped: 'devPitchVideoSkipped',
  logout: 'logout'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  QUESTIONS_AWAY: 'QUESTIONS_AWAY',
  BRANDS_AWAY: 'BRANDS_AWAY',
  PRODUCT_FEEDBACK: 'PRODUCT_FEEDBACK',
  COMEBACK_REMINDER: 'COMEBACK_REMINDER',
  EXPIRING_DEALS: 'EXPIRING_DEALS',
  NEW_BRANDS: 'NEW_BRANDS',
  NEW_BENEFITS: 'NEW_BENEFITS',
  GLOABL: 'GLOABL'
};

exports.content_view_sections = exports.$Enums.content_view_sections = {
  forYou: 'forYou',
  brandProfile: 'brandProfile'
};

exports.content_view_types = exports.$Enums.content_view_types = {
  brand: 'brand'
};

exports.Prisma.ModelName = {
  order_history: 'order_history',
  answers: 'answers',
  app_versions: 'app_versions',
  benefits: 'benefits',
  brands: 'brands',
  brands_likes: 'brands_likes',
  unlocked_brands_history: 'unlocked_brands_history',
  brand_screen_times: 'brand_screen_times',
  categories: 'categories',
  category_choices: 'category_choices',
  events: 'events',
  foundersReachedLeaderboard: 'foundersReachedLeaderboard',
  link_visits: 'link_visits',
  posts: 'posts',
  production_submissions: 'production_submissions',
  products: 'products',
  push_notifications: 'push_notifications',
  push_notification_history: 'push_notification_history',
  questionnaires: 'questionnaires',
  question_classes: 'question_classes',
  questions: 'questions',
  ratings: 'ratings',
  content_views: 'content_views',
  feedback: 'feedback',
  levels: 'levels',
  login_background_images: 'login_background_images',
  users: 'users',
  deal_codes: 'deal_codes',
  deal_code_groups: 'deal_code_groups'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
