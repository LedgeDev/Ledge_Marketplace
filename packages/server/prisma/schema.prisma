datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model app_versions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  version   String
  critical  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("app-versions")
}

model products {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  description  Json?
  images       Json[]
  regularPrice String?
  deal         String?
  dealPrice    String?
  purchaseUrl  String?
  brandId      String        @db.ObjectId
  brand        brands        @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  linkVisits   link_visits[]
  ratings      ratings[]
  uniqueDeal   Boolean?
  events       events[]

  @@map("products")
}

model push_notifications {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  title                 String?
  content               String
  type                  NotificationType?
  minDaysInactive       Int?
  oneTimeOnly           Boolean?
  sendAfterInactiveDays Int?
  repeatAfterDays       Int?
  daysAfterActivation   Int?
  daysBeforeExpiry      Int?

  @@map("push-notifications")
}

model push_notification_history {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  user     users             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type     NotificationType?
  entityId String?           @db.ObjectId
  content  String
  title    String
  sentAt   DateTime          @default(now())

  @@map("push-notification-history")
}

enum NotificationType {
  GENERAL
  PRODUCT
  EVENT
}

model brands {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  products[]
  questions questions[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("brands")
}

model link_visits {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())

  @@map("link-visits")
}

model events {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model question_classes {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  questions questions[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("question-classes")
}

model answers {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  questionId String    @db.ObjectId
  question   questions @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answer     Json
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("answers")
}

model questionnaires {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  questions questions[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("questionnaires")
}

model production_submissions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("production-submissions")
}

model questions {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  position                 Int
  question                 Json
  type                     String
  options                  Json[]
  classId                  String?           @db.ObjectId
  questionClass            question_classes? @relation(fields: [classId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  categoryId               String?           @db.ObjectId
  onboarding               Boolean           @default(false)
  answers                  answers[]
  randomizeOptions         Boolean?
  fixedOptionSize          Boolean?
  hideOptionText           Boolean?
  displayImage             Json?
  footnote                 Json?
  subtitle                 Json?
  products                 Json?
  brandId                  String?           @db.ObjectId
  brand                    brands?           @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  correctAnswerId          String?
  questionnaireId          String?           @db.ObjectId
  questionnaire            questionnaires?   @relation(fields: [questionnaireId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  questionnaireSubCategory Int?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  scaleTopLabel            Json?
  scaleBottomLabel         Json?
  maxOptions               Int?

  @@map("questions")
}

model ratings {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?   @db.ObjectId
  product   products? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rating    Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, productId])
  @@map("ratings")
}

model users {
  id                      String                      @id @map("_id")
  email                   String
  myFavourites            Json[]
  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt
  name                    String?
  notificationsToken      String?
  productionSubmissions   production_submissions[]
  superUser               Boolean?
  pushNotificationHistory push_notification_history[]
  hasCompletedOnboarding  Boolean?                    @default(false)
  location                String?
  profilePicture          Json?
  friendCode              String?
  ratings                 ratings[]
  lastOpened              DateTime?

  @@map("users")
}
